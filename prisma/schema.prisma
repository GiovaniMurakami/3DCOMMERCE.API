// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @db.Uuid
  email     String   @unique @db.VarChar(320)
  fullName  String   @map("full_name") @db.VarChar(255)
  cpf       String   @unique @db.VarChar(40)
  phone     String   @db.VarChar(20)
  photo     String?
  role      Role
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String?  @map("created_by") @db.Uuid

  creator         User?            @relation("UserCreatedBy", fields: [createdBy], references: [id])
  createdUsers    User[]           @relation("UserCreatedBy")
  customerProfile CustomerProfile?
  shoppingCart    ShoppingCart?
  order           Order[]
  products        Product[]

  @@map("users")
}

model CustomerProfile {
  id      String @id @db.Uuid
  userId  String @unique @map("user_id") @db.Uuid
  user    User   @relation(fields: [userId], references: [id])
  address String @db.VarChar(255)
  city    String @db.VarChar(255)

  @@map("customer_profiles")
}

model Product {
  id           String   @id @db.Uuid
  name         String   @db.VarChar(255)
  price        Decimal  @db.Decimal(10, 2)
  mainImageUrl String?  @map("main_image_url")
  fileUrl      String   @map("file_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  createdBy    String   @map("created_by") @db.Uuid
  user         User     @relation(fields: [createdBy], references: [id])

  shoppingCartItem ShoppingCartItem[]
  orderItem        OrderItem[]
  productImages    ProductImages[]

  @@index([name])
  @@map("products")
}

model ProductImages {
  id        String  @id @db.Uuid
  imageUrl  String
  productId String  @map("product_id") @db.Uuid
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId])
  @@map("product_images")
}

model ShoppingCart {
  id               String             @id @db.Uuid
  userId           String             @unique @map("user_id") @db.Uuid
  user             User               @relation(fields: [userId], references: [id])
  shoppingCartItem ShoppingCartItem[]

  @@index([userId])
  @@map("shopping_carts")
}

model ShoppingCartItem {
  id             String       @id @db.Uuid
  price          Decimal @db.Decimal(10, 2)
  quantity       Int
  shoppingCartId String       @map("shopping_cart_id") @db.Uuid
  shoppingCart   ShoppingCart @relation(fields: [shoppingCartId], references: [id])
  productId      String       @map("product_id") @db.Uuid
  product        Product      @relation(fields: [productId], references: [id])

  @@index([shoppingCartId])
  @@map("shopping_cart_items")
}

model Order {
  id            String      @id @db.Uuid
  currentStatus OrderStatus @map("current_status")
  totalPrice    Decimal     @map("total_price") @db.Decimal(10, 2)
  userId        String      @unique @map("user_id") @db.Uuid
  user          User        @relation(fields: [userId], references: [id])
  address       String
  createdAt     DateTime    @default(now()) @map("created_at")

  orderItem          OrderItem[]
  orderStatusHistory OrderStatusHistory[]

  @@index([userId, currentStatus])
  @@map("orders")
}

model OrderItem {
  id        String  @id @db.Uuid
  price     Decimal @db.Decimal(10, 2)
  quantity  Int
  productId String  @map("product_id") @db.Uuid
  product   Product @relation(fields: [productId], references: [id])
  orderId   String  @map("order_id") @db.Uuid
  order     Order   @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@map("order_items")
}

model OrderStatusHistory {
  id                   String      @id @db.Uuid
  orderId              String      @map("order_id") @db.Uuid
  order                Order       @relation(fields: [orderId], references: [id])
  status               OrderStatus
  statusTransitionDate DateTime    @default(now()) @map("status_transition_date")

  @@index([orderId, statusTransitionDate(sort: Desc)])
  @@map("order_status_history")
}

enum Role {
  CUSTOMER
  ADMIN
  MASTER
}

enum OrderStatus {
  PAYMENT_PENDING
  CANCELED
  PAID
  PRINTING
  SHIPPED
  DELIVERED
  RETURN_REQUESTED
  RETURN_APPROVED
  RETURNED
}
